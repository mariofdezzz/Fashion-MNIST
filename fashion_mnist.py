# -*- coding: utf-8 -*-
"""fashion_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wnhKK38p2nLpmLAuqveEqfpMEfWUURYp
"""

from google.colab import drive
drive.mount('/content/drive')

!ls '/content/drive/My Drive/Uni/Redes Neuronales/fashionmnist'

import csv
import numpy as np
import keras
from matplotlib import pyplot as plt

x_train = np.zeros((60000,784))
y_train = np.zeros(60000)
x_test = np.zeros((10000,784))
y_test = np.zeros(10000)

# Reading
with open('/content/drive/My Drive/Uni/Redes Neuronales/fashionmnist/fashion-mnist_train.csv', mode='r') as test_file:
    csv_reader = csv.reader(test_file)
    line_count = 0
    for row in csv_reader:
        if line_count != 0:
            x_train[line_count-1] = np.array(row[1:])
            y_train[line_count-1] = row[0]
        line_count += 1
    print(f'Train processed {line_count} lines.')

with open('/content/drive/My Drive/Uni/Redes Neuronales/fashionmnist/fashion-mnist_test.csv', mode='r') as test_file:
    csv_reader = csv.reader(test_file)
    line_count = 0
    for row in csv_reader:
        if line_count != 0:
            x_test[line_count-1] = np.array(row[1:])
            y_test[line_count-1] = row[0]
        line_count += 1
    print(f'Test processed {line_count} lines.')

# Veamos una imagen cualquiera, por ejemplo, con el índice 125
image = x_train[666].reshape(28,28)

plt.imshow(image, cmap='gray')
plt.show()
#
print(y_train[666])

# -- Escalado de rango --
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

x_train /= 255  # Escalamos a un rango entre 0 y 1
x_test /= 255

x_train -= 0.5  # desplazamos el rango a -0.5 y 0.5
x_test -= 0.5

print("Max value:", max(x_train[125]))
print("Min value:", min(x_train[125]))

x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)

# ---- One hot ----
y_train = keras.utils.to_categorical(y_train, 10)  # 10 clases
y_test = keras.utils.to_categorical(y_test, 10)

print("Label:", y_train[125])  # Recordemos que esta muestra tenía valor 8

from keras.layers import Input, Dense
from keras.models import Model

inputs = Input(shape=(784,))  # Capa de entrada
output_h = Dense(units=20, activation='sigmoid')(inputs)  # Capa oculta
predictions = Dense(10, activation='softmax')(output_h)  # Capa de salida

model = Model(inputs=inputs, outputs=predictions)

model.compile(loss='mse',
              optimizer=keras.optimizers.SGD(lr=1),
              metrics=['accuracy'])

history = model.fit(x_train, y_train, epochs=50, batch_size=30, validation_data=(x_test, y_test))

from matplotlib import pyplot as plt 

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='validation accuracy')

plt.title('Entrenamiento MNIST')
plt.xlabel('Épocas')
plt.legend(loc="lower right")

plt.show()